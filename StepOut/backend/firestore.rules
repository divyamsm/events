rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    match /users/{userId} {
      // Allow any authenticated user to read user profiles (needed for contact matching and friend discovery)
      allow read: if isSignedIn();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    // Username collection for uniqueness checking
    match /usernames/{username} {
      // Anyone can read to check availability during signup
      allow read: if true;
      // Only the owner can create their username reservation
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      // Usernames cannot be updated or deleted
      allow update, delete: if false;
    }

    match /events/{eventId} {
      // Users can read events if:
      // - Event is public, OR
      // - User is the owner, OR
      // - User is invited (in invitedUserIds array)
      allow read: if resource.data.visibility == "public"
                  || request.auth.uid == resource.data.ownerId
                  || (request.auth.uid in resource.data.get('invitedUserIds', []));

      allow create: if isSignedIn()
        && request.resource.data.ownerId == request.auth.uid;

      allow update: if isSignedIn()
        && resource.data.ownerId == request.auth.uid;

      allow delete: if false; // use soft delete via the `canceled` flag.

      match /members/{memberId} {
        allow read: if true;
        allow create, update: if true;
        allow delete: if false;
      }
    }

    match /invites/{inviteId} {
      allow create: if isSignedIn()
        && request.resource.data.senderId == request.auth.uid;

      allow read: if isSignedIn()
        && (resource.data.senderId == request.auth.uid
          || resource.data.recipientUserId == request.auth.uid);

      allow update: if isSignedIn()
        && (resource.data.senderId == request.auth.uid
          || resource.data.recipientUserId == request.auth.uid);

      allow delete: if false;
    }

    match /widgetSnapshots/{userId} {
      allow read, write: if isOwner(userId);
    }

    match /chats/{chatId} {
      // Users can read/write chats if they are a participant
      allow read: if isSignedIn()
        && request.auth.uid in resource.data.participantIds;

      allow create: if isSignedIn();

      allow update: if isSignedIn()
        && request.auth.uid in resource.data.participantIds;

      // Messages subcollection
      match /messages/{messageId} {
        // Anyone who can read the parent chat can read messages
        allow read: if isSignedIn()
          && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;

        // Anyone who is a participant can create messages
        allow create: if isSignedIn()
          && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds
          && request.resource.data.senderId == request.auth.uid;

        // Messages cannot be updated or deleted
        allow update, delete: if false;
      }
    }
  }
}
